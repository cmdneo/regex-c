=> str_strip
<%
	str $tmp0 = cstr($strip_me);
	$tmp0 = str_strip($tmp0, cstr($strip_ends));
	result = str_cmp($tmp0, cstr($expected)) == 0;

%>
:strip_me            strip_ends   expected
"ABAB STUFF ABAB"      "AB"      " STUFF "
"FRONTMATTER"          "FRONT"   "MATTER"
"MATTERBACK"           "BACK"    "MATTER"


=> strbuf_remove
<%
	strbuf $tmp0 = strbuf_create_from_str(cstr($s));
	strbuf_remove(&$tmp0, $start, $end);
	result = str_cmp(cstr($expected), strbuf_to_str(&$tmp0)) == 0;
	strbuf_destroy(&$tmp0);
%>
:s         start end         expected
"NexT"    1     3           "NT"
"NexT"    1     4           "N"
"DOnt remove" 1 1 "DOnt remove"

=> strbuf_append
<%
	strbuf $tmp0 = strbuf_create_from_str(cstr($s));
	strbuf_append(&$tmp0, cstr($append_this));
	result = strbuf_cmp(&$tmp0, cstr($expected)) == 0;
	strbuf_destroy(&$tmp0);
%>
:s         append_this     expected
"hello, "     "world"      "hello, world"
"123"         "456"         "123456"

=> strbuf_strip
<%
	strbuf $tmp0 = strbuf_create_from_str(cstr($strip_me));
	strbuf_strip(&$tmp0, cstr($strip_this));
	result = strbuf_cmp(&$tmp0, cstr($expected)) == 0;
	strbuf_destroy(&$tmp0);
%>
:strip_me             strip_this  expected
"ABAB STUFF ABAB"      "AB"      " STUFF "
"FRONTMATTER"          "FRONT"   "MATTER"
"MATTERBACK"           "BACK"    "MATTER"