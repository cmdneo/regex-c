#ifndef REGEX_TOKENS_H_INTERNAL
#define REGEX_TOKENS_H_INTERNAL

#include "strlx/strlx.h"

typedef struct token_T {
	int pos;
	int value;
	int type;
	str chars;
} token_T;

/* Start generated code. Generated by: gentokens.py */
/* clang-format off */
enum re_token_code {
	RE_TC_PCC_ALNUM,
	RE_TC_PCC_ALPHA,
	RE_TC_PCC_ASCII,
	RE_TC_PCC_BLANK,
	RE_TC_PCC_CNTRL,
	RE_TC_PCC_DIGIT,
	RE_TC_PCC_GRAPH,
	RE_TC_PCC_LOWER,
	RE_TC_PCC_PRINT,
	RE_TC_PCC_PUNCT,
	RE_TC_PCC_SPACE,
	RE_TC_PCC_UPPER,
	RE_TC_PCC_WORD,
	RE_TC_PCC_XDIGIT,
	RE_TC_ESC_RBRACKET,
	RE_TC_ESC_LBRACKET,
	RE_TC_ESC_LBRACE,
	RE_TC_ESC_RBRACE,
	RE_TC_ESC_LPAREN,
	RE_TC_ESC_RPAREN,
	RE_TC_ESC_CARET,
	RE_TC_ESC_DOLLAR,
	RE_TC_ESC_QMARK,
	RE_TC_ESC_PLUS,
	RE_TC_ESC_ASTERISK,
	RE_TC_ESC_PERIOD,
	RE_TC_ESC_BAR,
	RE_TC_ESC_BSLASH,
	RE_TC_PLUS_LAZY,
	RE_TC_QMARK_LAZY,
	RE_TC_ASTERISK_LAZY,
	RE_TC_CC_DIGIT,
	RE_TC_CC_NON_DIGIT,
	RE_TC_CC_WORD_CHAR,
	RE_TC_CC_NON_WORD_CHAR,
	RE_TC_CC_WHITESPACE,
	RE_TC_CC_NON_WHITESPACE,
	RE_TC_ANC_BEGIN,
	RE_TC_ANC_END,
	RE_TC_ANC_BOUND_WORD,
	RE_TC_ANC_BOUND_NON_WORD,
	RE_TC_ESC_BELL,
	RE_TC_ESC_BS,
	RE_TC_ESC_FF,
	RE_TC_ESC_NL,
	RE_TC_ESC_CR,
	RE_TC_ESC_VT,
	RE_TC_ESC_TAB,
	RE_TC_ESC_HEX,
	RE_TC_LBRACKET,
	RE_TC_RBRACKET,
	RE_TC_LBRACE,
	RE_TC_RBRACE,
	RE_TC_LPAREN,
	RE_TC_RPAREN,
	RE_TC_CARET,
	RE_TC_DOLLAR,
	RE_TC_QMARK,
	RE_TC_PLUS,
	RE_TC_ASTERISK,
	RE_TC_PERIOD,
	RE_TC_BAR,
	RE_TC_BSLASH,
	RE_TC_ORD,
	RE_TC_GNUM,
};

static const token_T RE_TOKENS[] = {
	[RE_TC_PCC_ALNUM] = { .chars = M_str("[:alnum:]"), .type = RE_TC_PCC_ALNUM },
	[RE_TC_PCC_ALPHA] = { .chars = M_str("[:alpha:]"), .type = RE_TC_PCC_ALPHA },
	[RE_TC_PCC_ASCII] = { .chars = M_str("[:ascii:]"), .type = RE_TC_PCC_ASCII },
	[RE_TC_PCC_BLANK] = { .chars = M_str("[:blank:]"), .type = RE_TC_PCC_BLANK },
	[RE_TC_PCC_CNTRL] = { .chars = M_str("[:cntrl:]"), .type = RE_TC_PCC_CNTRL },
	[RE_TC_PCC_DIGIT] = { .chars = M_str("[:digit:]"), .type = RE_TC_PCC_DIGIT },
	[RE_TC_PCC_GRAPH] = { .chars = M_str("[:graph:]"), .type = RE_TC_PCC_GRAPH },
	[RE_TC_PCC_LOWER] = { .chars = M_str("[:lower:]"), .type = RE_TC_PCC_LOWER },
	[RE_TC_PCC_PRINT] = { .chars = M_str("[:print:]"), .type = RE_TC_PCC_PRINT },
	[RE_TC_PCC_PUNCT] = { .chars = M_str("[:punct:]"), .type = RE_TC_PCC_PUNCT },
	[RE_TC_PCC_SPACE] = { .chars = M_str("[:space:]"), .type = RE_TC_PCC_SPACE },
	[RE_TC_PCC_UPPER] = { .chars = M_str("[:upper:]"), .type = RE_TC_PCC_UPPER },
	[RE_TC_PCC_WORD] = { .chars = M_str("[:word:]"), .type = RE_TC_PCC_WORD },
	[RE_TC_PCC_XDIGIT] = { .chars = M_str("[:xdigit:]"), .type = RE_TC_PCC_XDIGIT },
	[RE_TC_ESC_RBRACKET] = { .chars = M_str("\\]"), .type = RE_TC_ORD, .value = ']' },
	[RE_TC_ESC_LBRACKET] = { .chars = M_str("\\["), .type = RE_TC_ORD, .value = '[' },
	[RE_TC_ESC_LBRACE] = { .chars = M_str("\\{"), .type = RE_TC_ORD, .value = '{' },
	[RE_TC_ESC_RBRACE] = { .chars = M_str("\\}"), .type = RE_TC_ORD, .value = '}' },
	[RE_TC_ESC_LPAREN] = { .chars = M_str("\\("), .type = RE_TC_ORD, .value = '(' },
	[RE_TC_ESC_RPAREN] = { .chars = M_str("\\)"), .type = RE_TC_ORD, .value = ')' },
	[RE_TC_ESC_CARET] = { .chars = M_str("\\^"), .type = RE_TC_ORD, .value = '^' },
	[RE_TC_ESC_DOLLAR] = { .chars = M_str("\\$"), .type = RE_TC_ORD, .value = '$' },
	[RE_TC_ESC_QMARK] = { .chars = M_str("\\?"), .type = RE_TC_ORD, .value = '?' },
	[RE_TC_ESC_PLUS] = { .chars = M_str("\\+"), .type = RE_TC_ORD, .value = '+' },
	[RE_TC_ESC_ASTERISK] = { .chars = M_str("\\*"), .type = RE_TC_ORD, .value = '*' },
	[RE_TC_ESC_PERIOD] = { .chars = M_str("\\."), .type = RE_TC_ORD, .value = '.' },
	[RE_TC_ESC_BAR] = { .chars = M_str("\\|"), .type = RE_TC_ORD, .value = '|' },
	[RE_TC_ESC_BSLASH] = { .chars = M_str("\\\\"), .type = RE_TC_ORD, .value = '\\' },
	[RE_TC_PLUS_LAZY] = { .chars = M_str("+?"), .type = RE_TC_PLUS_LAZY },
	[RE_TC_QMARK_LAZY] = { .chars = M_str("??"), .type = RE_TC_QMARK_LAZY },
	[RE_TC_ASTERISK_LAZY] = { .chars = M_str("*?"), .type = RE_TC_ASTERISK_LAZY },
	[RE_TC_CC_DIGIT] = { .chars = M_str("\\d"), .type = RE_TC_CC_DIGIT },
	[RE_TC_CC_NON_DIGIT] = { .chars = M_str("\\D"), .type = RE_TC_CC_NON_DIGIT },
	[RE_TC_CC_WORD_CHAR] = { .chars = M_str("\\w"), .type = RE_TC_CC_WORD_CHAR },
	[RE_TC_CC_NON_WORD_CHAR] = { .chars = M_str("\\W"), .type = RE_TC_CC_NON_WORD_CHAR },
	[RE_TC_CC_WHITESPACE] = { .chars = M_str("\\s"), .type = RE_TC_CC_WHITESPACE },
	[RE_TC_CC_NON_WHITESPACE] = { .chars = M_str("\\S"), .type = RE_TC_CC_NON_WHITESPACE },
	[RE_TC_ANC_BEGIN] = { .chars = M_str("\\A"), .type = RE_TC_ANC_BEGIN },
	[RE_TC_ANC_END] = { .chars = M_str("\\Z"), .type = RE_TC_ANC_END },
	[RE_TC_ANC_BOUND_WORD] = { .chars = M_str("\\b"), .type = RE_TC_ANC_BOUND_WORD },
	[RE_TC_ANC_BOUND_NON_WORD] = { .chars = M_str("\\B"), .type = RE_TC_ANC_BOUND_NON_WORD },
	[RE_TC_ESC_BELL] = { .chars = M_str("\\a"), .type = RE_TC_ORD, .value = '\a' },
	[RE_TC_ESC_BS] = { .chars = M_str("\\b"), .type = RE_TC_ORD, .value = '\b' },
	[RE_TC_ESC_FF] = { .chars = M_str("\\f"), .type = RE_TC_ORD, .value = '\f' },
	[RE_TC_ESC_NL] = { .chars = M_str("\\n"), .type = RE_TC_ORD, .value = '\n' },
	[RE_TC_ESC_CR] = { .chars = M_str("\\r"), .type = RE_TC_ORD, .value = '\r' },
	[RE_TC_ESC_VT] = { .chars = M_str("\\v"), .type = RE_TC_ORD, .value = '\v' },
	[RE_TC_ESC_TAB] = { .chars = M_str("\\t"), .type = RE_TC_ORD, .value = '\t' },
	[RE_TC_ESC_HEX] = { .chars = M_str("\\x"), .type = RE_TC_ORD },
	[RE_TC_LBRACKET] = { .chars = M_str("["), .type = RE_TC_LBRACKET, .value = '[' },
	[RE_TC_RBRACKET] = { .chars = M_str("]"), .type = RE_TC_RBRACKET, .value = ']' },
	[RE_TC_LBRACE] = { .chars = M_str("{"), .type = RE_TC_LBRACE, .value = '{' },
	[RE_TC_RBRACE] = { .chars = M_str("}"), .type = RE_TC_RBRACE, .value = '}' },
	[RE_TC_LPAREN] = { .chars = M_str("("), .type = RE_TC_LPAREN, .value = '(' },
	[RE_TC_RPAREN] = { .chars = M_str(")"), .type = RE_TC_RPAREN, .value = ')' },
	[RE_TC_CARET] = { .chars = M_str("^"), .type = RE_TC_CARET, .value = '^' },
	[RE_TC_DOLLAR] = { .chars = M_str("$"), .type = RE_TC_DOLLAR, .value = '$' },
	[RE_TC_QMARK] = { .chars = M_str("?"), .type = RE_TC_QMARK, .value = '?' },
	[RE_TC_PLUS] = { .chars = M_str("+"), .type = RE_TC_PLUS, .value = '+' },
	[RE_TC_ASTERISK] = { .chars = M_str("*"), .type = RE_TC_ASTERISK, .value = '*' },
	[RE_TC_PERIOD] = { .chars = M_str("."), .type = RE_TC_PERIOD, .value = '.' },
	[RE_TC_BAR] = { .chars = M_str("|"), .type = RE_TC_BAR, .value = '|' },
	[RE_TC_BSLASH] = { .chars = M_str("\\"), .type = RE_TC_BSLASH, .value = '\\' },
};

static const str RE_PCC_CHARS[] = {
	[RE_TC_PCC_ALNUM] = M_str(
		"0123456789abcde"
		"fghijklmnopqrst"
		"uvwxyzABCDEFGHI"
		"JKLMNOPQRSTUVWX"
		"YZ"
	),
	[RE_TC_PCC_ALPHA] = M_str(
		"abcdefghijklmno"
		"pqrstuvwxyzABCD"
		"EFGHIJKLMNOPQRS"
		"TUVWXYZ"
	),
	[RE_TC_PCC_ASCII] = M_str(
		"\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e"
		"\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d"
		"\x1e\x1f !\"#$%&\'()*+,"
		"-./0123456789:;"
		"<=>?@ABCDEFGHIJ"
		"KLMNOPQRSTUVWXY"
		"Z[\\]^_`abcdefgh"
		"ijklmnopqrstuvw"
		"xyz{|}~\x7f"
	),
	[RE_TC_PCC_BLANK] = M_str(
		" \t"
	),
	[RE_TC_PCC_CNTRL] = M_str(
		"\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e"
		"\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d"
		"\x1e\x7f"
	),
	[RE_TC_PCC_DIGIT] = M_str(
		"0123456789"
	),
	[RE_TC_PCC_GRAPH] = M_str(
		"!\"#$%&\'()*+,-./"
		"0123456789:;<=>"
		"?@ABCDEFGHIJKLM"
		"NOPQRSTUVWXYZ[\\"
		"]^_`abcdefghijk"
		"lmnopqrstuvwxyz"
		"{|}~"
	),
	[RE_TC_PCC_LOWER] = M_str(
		"abcdefghijklmno"
		"pqrstuvwxyz"
	),
	[RE_TC_PCC_PRINT] = M_str(
		" !\"#$%&\'()*+,-."
		"/0123456789:;<="
		">?@ABCDEFGHIJKL"
		"MNOPQRSTUVWXYZ["
		"\\]^_`abcdefghij"
		"klmnopqrstuvwxy"
		"z{|}~"
	),
	[RE_TC_PCC_PUNCT] = M_str(
		"!\"#$%&\'()*+,-./"
		":;<=>?@[\\]^_`{|"
		"}~"
	),
	[RE_TC_PCC_SPACE] = M_str(
		" \t\n\r\x0c\x0b"
	),
	[RE_TC_PCC_UPPER] = M_str(
		"ABCDEFGHIJKLMNO"
		"PQRSTUVWXYZ"
	),
	[RE_TC_PCC_WORD] = M_str(
		"0123456789abcde"
		"fghijklmnopqrst"
		"uvwxyzABCDEFGHI"
		"JKLMNOPQRSTUVWX"
		"YZ_"
	),
	[RE_TC_PCC_XDIGIT] = M_str(
		"0123456789ABCDE"
		"Fabcdef"
	),
};

/* clang-format on */
/* End generated code. Generated by: gentokens.py */

enum re_token_info {
	RE_NTOKENS = (sizeof RE_TOKENS) / (sizeof RE_TOKENS[0]),
};

#endif
